import os
from datetime import datetime
import streamlit as st
from dotenv import load_dotenv
import google.generativeai as genai
import markdown2
from weasyprint import HTML

# Load environment variables
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")

# Configure Gemini
genai.configure(api_key=api_key)

# Initialize Gemini model
model = genai.GenerativeModel("gemini-1.5-flash")

# Function to generate code and analysis in selected language
def generate_code(topic, language):
    prompt = f"""
You are an expert coding tutor for beginners.

The user wants explanations in **{language}**.

Topic: {topic}

Generate working code in the following languages:
1. Python
2. C
3. C++
4. Java

**Output Format (Very Important!)**  
For each language, provide:

1. **Heading** with the language name.  
2. **Full code** in a markdown code block.  
3. **Complexity Table**:  

   | Metric           | Value   |
   |------------------|---------|
   | Time Complexity  | O(...)  |
   | Space Complexity | O(...)  |

4. **What the Code Does** ‚Äì 2‚Äì3 sentences, plain and simple, in {language}, describing the overall purpose.  
5. **Function Purposes** ‚Äì List each function and briefly explain what it does, in {language}.  
6. **Library Usage Reasons** ‚Äì List each library used and why it is needed, in {language}.

**End Section:**  
- Create a markdown comparison table of all four languages.  
- Recommend the most optimal language for this task and explain why (short answer, 2‚Äì3 sentences), in {language}.  

**Important:**  
- Keep explanations short, clear, and beginner-friendly.  
- Avoid overly technical or lengthy text.
"""
    response = model.generate_content(prompt)
    return response.text

# Save markdown content as styled PDF
def save_as_pdf(content, filename="code_output.pdf"):
    os.makedirs("downloads", exist_ok=True)
    filepath = os.path.join("downloads", filename)

    html_content = markdown2.markdown(content, extras=["fenced-code-blocks", "tables"])

    styled_html = f"""
    <html>
    <head>
        <meta charset="utf-8">
        <style>
            body {{
                font-family: 'Courier New', monospace;
                font-size: 12px;
                padding: 30px;
                color: #222;
            }}
            h1, h2, h3 {{
                font-weight: bold;
                color: #333;
            }}
            pre {{
                background-color: #f4f4f4;
                border: 1px solid #ccc;
                padding: 10px;
                overflow-x: auto;
                white-space: pre-wrap;
                word-wrap: break-word;
                border-radius: 6px;
                margin-bottom: 20px;
            }}
            code {{
                background-color: #eee;
                padding: 2px 4px;
                border-radius: 4px;
            }}
            table {{
                border-collapse: collapse;
                width: 100%;
                margin-top: 15px;
                margin-bottom: 20px;
            }}
            th, td {{
                border: 1px solid #666;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #ddd;
                font-weight: bold;
            }}
        </style>
    </head>
    <body>
        <h2>Generated by TutorBot üí°</h2>
        {html_content}
    </body>
    </html>
    """

    HTML(string=styled_html).write_pdf(filepath)
    return filepath

# Streamlit UI
st.set_page_config(page_title="Code Tutor Bot", page_icon="üß†", layout="centered")
st.title("Algoverse")
st.markdown("**Enter a coding topic** to generate code in Python, C, C++, and Java with complexity analysis and explanation in your preferred language.")

# Input fields
topic = st.text_input("üß† Enter Topic (e.g., Binary Search, Queue, Recursion)")
language_choice = st.selectbox("üåê Select Explanation Language", ["English", "Tamil", "Hindi"])

if st.button("üöÄ Generate Code & Analysis"):
    if not topic.strip():
        st.warning("Please enter a topic.")
    else:
        with st.spinner(f"Generating with Gemini in {language_choice}..."):
            result = generate_code(topic, language_choice)
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            pdf_path = save_as_pdf(result, filename=f"code_output_{timestamp}.pdf")

        st.success("‚úÖ Code and analysis generated!")
        st.markdown("### üîç Output Preview:")
        st.markdown(result, unsafe_allow_html=True)

        with open(pdf_path, "rb") as f:
            st.download_button(
                label="üì• Download as PDF",
                data=f,
                file_name=os.path.basename(pdf_path),
                mime="application/pdf"
            )
